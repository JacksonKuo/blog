---
layout: post
title: "Trufflehog Shallow Clone Insecurity - Part II"
date: 2024-12-12
tags: ["github"]
published: false
---

**Contents**
* TOC
{:toc}

# Problem Statement

Following a compromised Github Action via shell injection, what exploitation is possible? Saying this more explicitly, can the following occur:

* Can a compromised GHA on a public repo lead to compromise of internal/private repositories?
* What configurations need to be set for escalation?

# Introduction

Let's first start out with some initial learning points: 

Pull request event types come in two flavors: `pull_request` and `pull_request_target`. And pull requests can be opened via branches or forks.[^1]. The following are the security consideration for each variation.

| event type | code context | repository | token permissions | secrets |
|---|---|---|---|
| Forked PR | merge commit | base:base repo,<br />head:forked repo | READ | No | 
| Branch PR | merge commit | base:same repo,<br />head:same repo | WRITE | Yes | 
| PR target | base branch | base: repo | WRITE | Yes | 

#### Event: `pull_request`

Workflows triggered by `pull_request` run in the context of the merge commit. But what does this mean?

A merge commit is just a commit with two parents. During the pull request process, the workflow will create a merge commit between the Base branch and the feature branch HEAD, in order to check for mergability conflicts.[^2]

More specifically, the workflow triggered by `pull_request` will create a temporary test commit that is a merge of the `pull_request.head` to the `pull_request.base`. This test commit only exists in the workflow and is use to validate the pull request before merging is allowed.[^3]

{:refdef: style="text-align: center;"}
![Image]({{ site.baseurl }}/assets/images/merge-commit.webp)
{: refdef}
{:refdef: style="text-align: center;"}
[\[Pull request process\]](https://www.kenmuse.com/blog/the-many-shas-of-a-github-pull-request)
{: refdef}

Branch PRs have WRITE permissions and repo secret permissions to the target repository.[^4] Forked PRs only have READ permissions and no repo secret access. 

#### Event: `pull_request_target`

Workflows triggered by `pull_request_target` runs in the context of the base branch. This means that the workflow doesn't have access to a merge commit that could have access controlled ?


=====

![Image]({{ site.baseurl }}/assets/images/github-action.png)


The Trufflehog documentation uses just `pull_request`


What are they and exploitation risk

In the beginning `pull_request` existed with a READ-only `GITHUB_TOKEN`. For forked repos, 

But what if you wanted a workflow that adds a label on every new PR. So `pull_request_target` was created with READ/WRITE. But this new workflow event type opens up a vulnerability. If a public repo workflow was taken over by a malicious forked PR, that PR would have WRITE access on the repo. 


# Security Literature

* https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/

* https://github.com/jstawinski/GitHub-Actions-Attack-Diagram
* https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch/comment-page-1/
* https://adnanthekhan.com/2024/05/06/the-monsters-in-your-build-cache-github-actions-cache-poisoning/
* https://cloud.hacktricks.xyz/pentesting-ci-cd/github-security/abusing-github-actions
* https://medium.com/tinder/exploiting-github-actions-on-open-source-projects-5d93936d189f
* https://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability
* https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/controlling-permissions-for-github_token#overview
* https://www.synacktiv.com/en/publications/github-actions-exploitation-introduction
* https://snyk.io/blog/ultralytics-ai-pwn-request-supply-chain-attack/
* https://i.blackhat.com/BH-US-24/Presentations/US24-Khan-Self-Hosted-GitHub-CICD-Runners-Continuous-Integration-Continuous-Destruction.pdf?_gl=1*tqa1p0*_gcl_au*MTAyNzQ1ODg1OC4xNzMyMDMxMDE4*_ga*MTU0MjU2OTA1NC4xNzMyMDMxMDE5*_ga_K4JK67TFYV*MTczMzgyODU3Ni42LjEuMTczMzgyODU5NS4wLjAuMA..&_ga=2.86604824.1891990570.1733828577-1542569054.1732031019
* https://github.com/AdnaneKhan/Gato-X?tab=readme-ov-file
* https://karimrahal.com/2023/01/05/github-actions-leaking-secrets/



# Considerations

required workflows
masks
github app

# Token Types

* Default
* PAT
* Github App

# Attack buckets

* env var credentials / masked creds
* github workflow cache blasting


# References

[^1]: Note: Branch PRs are also called same repository PRs, in-repository PRs, or local PRs. The name branch PR likely come from this doc: [https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). Forked PRs are also called external PRs. 

[^2]: Note, the Base branch is also called the target branch. The feature branch is also refered as the head, source, or compare branch. 

[^3]: [https://www.kenmuse.com/blog/the-many-shas-of-a-github-pull-request/](https://www.kenmuse.com/blog/the-many-shas-of-a-github-pull-request/)

[^4]: `The reasoning behind the latter is that it is safe to share the repository secrets if the user creating the PR has write permission to the target repository already.` [https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/](https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/)

https://frontside.com/blog/2020-05-26-github-actions-pull_request/



[^5]: []()

[^6]: []()

[^7]: [https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token](https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token)

[^8]: [https://trufflesecurity.com/blog/running-trufflehog-in-a-github-action](https://trufflesecurity.com/blog/running-trufflehog-in-a-github-action)

