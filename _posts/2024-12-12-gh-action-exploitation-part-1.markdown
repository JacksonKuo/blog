---
layout: post
title: "Trufflehog Shallow Clone Insecurity - Part I"
date: 2024-12-12
tags: ["github"]
published: false
---

**Contents**
* TOC
{:toc}

# Problem Statement

Trufflehog's Github documentation uses `github.event.pull_request.head.ref` for shallow cloning. This pattern looks inherently dangerous. Does this pattern lead to shell injection within the Github Action?

{% raw %}
```
- shell: bash
  run: |
    if [ "${{ github.event_name }}" == "push" ]; then
      echo "depth=$(($(jq length <<< '${{ toJson(github.event.commits) }}') + 2))" >> $GITHUB_ENV
        echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV
      fi
      if [ "${{ github.event_name }}" == "pull_request" ]; then
        echo "depth=$((${{ github.event.pull_request.commits }}+2))" >> $GITHUB_ENV
        echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
      fi
```
{% endraw %}

# Trufflehog Github Action

Let's first talk about the general usage of the Trufflehog Github Action:[^1]

```
General Usage
on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        extra_args: --results=verified,unknown
```
A `fetch-depth: 0` will fetch all history for all branches and tags.[^2]. This type of fetch is roughly size equivalent to cloning the whole repo. By default, `action/checkout` has a `fetch-depth` set to 1, which only fetches a single commit of the `ref/SHA` that triggered the workflow. For workflows that trigger on pull requests, the `ref/SHA` is the merge commit.[^3]

Neither of these two options is ideal for Trufflehog. A depth 0 is way too large and includes the entire repo history, while depth 1 only fetches the top commit and may exclude changes from earlier commits of the PR. In comes shallow cloning...

# Shallow Cloning

Shallow cloning allows Trufflehog to checkout only commits relevant to the pull request. Instead of checking out the entire repository, only commits up to a certain depth, i.e. between a base commit and head commit of the PR branch, are cloned. For multi-GB repositories shallow cloning is a MUST to keep PR scans fast.[^4] [^5]

# Attack Scenario

The `github.event.pull_request.head.ref` is the branch name and one of the event contexts that are user-controlled:[^6]

* `github.event.issue.title`
* `github.event.issue.body`
* `github.event.pull_request.title`
* `github.event.pull_request.body`
* `github.event.comment.body`
* `github.event.review.body`
* `github.event.pages.*.page_name`
* `github.event.commits.*.message`
* `github.event.head_commit.message`
* `github.event.head_commit.author.email`
* `github.event.head_commit.author.name`
* `github.event.commits.*.author.email`
* `github.event.commits.*.author.name`
* **`github.event.pull_request.head.ref`**
* `github.event.pull_request.head.label`
* `github.event.pull_request.head.repo.default_branch`
* `github.head_ref`

The branch name has character restrictions, which include colon or spaces.

`They cannot have ASCII control characters (i.e. bytes whose values are lower than \040, or \177 DEL), space, tilde ~, caret ^, or colon : anywhere.`[^7]

However, with a little bash magic `zzz";echo${IFS}"hello";#`[^8] and a vulnerable Github Action, the end result is arbitrary bash execution within the workflow.

**Vulnerable Github Action**
{% raw %}
```bash
# trufflehog-shallow-clone/.github/workflows/shallow-clone.yml
name: Shallow Clone

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Run a multi-line script
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "depth=$((${{ github.event.pull_request.commits }}+2))" >> $GITHUB_ENV
            echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          fi
```
{% endraw %}
**\*\*Job Output\*\***
```
Run if [ "pull_request" == "pull_request" ]; then
  if [ "pull_request" == "pull_request" ]; then
    echo "depth=$((1+2))" >> $GITHUB_ENV
    echo "branch=zzz";echo${IFS}"hello";#" >> $GITHUB_ENV
  fi
  shell: /usr/bin/bash -e {0}
branch=zzz
hello
```

# Mitigation

Note that using single quotes instead of double quotes does not fix this issue and is still vulnerable to bash injection. Instead store the branch name in a environment variable and then use bash variable expansion: "$zzz" instead of Github Action expressions: "$\{\{ zzz \}\}". 

**Vulnerable Github Action**
{% raw %}
```bash
# trufflehog-shallow-clone/.github/workflows/shallow-clone.yml
name: Shallow Clone

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Run a multi-line script
        env:
          BRANCH: "${{ github.event.pull_request.head.ref }}"
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "depth=$((${{ github.event.pull_request.commits }}+2))" >> $GITHUB_ENV
            echo "branch=$BRANCH" >> $GITHUB_ENV
            echo "Branch: $BRANCH"
          fi
```
{% endraw %}
**\*\*Job Output\*\***
```
Run if [ "pull_request" == "pull_request" ]; then
  if [ "pull_request" == "pull_request" ]; then
    echo "depth=$((1+2))" >> $GITHUB_ENV
    echo "branch=$BRANCH" >> $GITHUB_ENV
    echo "Branch: $BRANCH"
  fi
  shell: /usr/bin/bash -e {0}
  env:
    BRANCH: zzz";echo${IFS}"hello";#
Branch: zzz";echo${IFS}"hello";#
```

# References
[^1]: [https://github.com/trufflesecurity/trufflehog?tab=readme-ov-file#general-usage](https://github.com/trufflesecurity/trufflehog?tab=readme-ov-file#general-usage)
[^2]: [https://github.com/actions/checkout](https://github.com/actions/checkout)
[^3]: [https://www.kenmuse.com/blog/the-many-shas-of-a-github-pull-request/](https://www.kenmuse.com/blog/the-many-shas-of-a-github-pull-request/)
[^4]: [https://github.com/trufflesecurity/trufflehog?tab=readme-ov-file#shallow-cloning](https://github.com/trufflesecurity/trufflehog?tab=readme-ov-file#shallow-cloning)
[^5]: [https://trufflesecurity.com/blog/running-trufflehog-in-travis-ci](https://trufflesecurity.com/blog/running-trufflehog-in-travis-ci)
[^6]: [https://securitylab.github.com/resources/github-actions-untrusted-input/](https://securitylab.github.com/resources/github-actions-untrusted-input/)
[^7]: [https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html](https://mirrors.edge.kernel.org/pub/software/scm/git/docs/git-check-ref-format.html)
[^8]: The `#` symbol acts as the start of a comment in bash 