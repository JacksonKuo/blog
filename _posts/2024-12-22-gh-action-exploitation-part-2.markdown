---
layout: post
title: "Trufflehog Shallow Clone Insecurity: Part II - Workflow Foundations"
date: 2024-12-22
tags: ["github"]
published: true
---

**Contents**
* TOC
{:toc}

# Problem Statement

Before understanding how Trufflehog is impacted, we first need to understand how workflows are triggered and the underlying permission model

# Exploration

There are two primary methods to introduce malicious code to workflows. One way is to leverage PR metadata as was shown with Trufflehog shallow cloning. The second method is to use PRs to modify build scripts that are run within workflows. 

{% raw %}
```
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - uses: actions/setup-node@v1
    - run: |
        npm install
        npm build
```
{% endraw %}

See [https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/](https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/) for more details on this second method.

Both methods to execute code can be triggered through pull requests.[^1] Pull request event types come in two flavors: `pull_request` and `pull_request_target`. And pull requests can be opened via branches or forks.[^2]. The following are the security consideration for each variation.

| event type | code context | repository | token perms | secrets |
|---|---|---|---|
| Forked PR | PR branch / merge commit| base:base repo,<br />head:forked repo | READ | No | 
| Branch PR | PR branch / merge commit | base:same repo,<br />head:same repo | WRITE | Yes |
| PR target | base branch | base: repo | WRITE | Yes |

#### Event: `pull_request`

Workflows triggered by `pull_request` could run with the context of a PR branch or a merge commit. By default a PR checkout points to the PR branch, but developers can optionally set the checkout to the merge commit. But what does this mean?

A merge commit is just a commit with two parents. During the pull request process a merge commit is created between the Base branch and the feature branch HEAD, in order to check for mergability conflicts.[^3]

More specifically, a temporary test commit will created that is a merge of the `pull_request.head` to the `pull_request.base`. This test commit can be referenced by `pull_request` workflows and is use to validate the pull request before merging is allowed.[^4]

{:refdef: style="text-align: center;"}
![Image]({{ site.baseurl }}/assets/images/merge-commit.webp)
{: refdef}
{:refdef: style="text-align: center;"}
[\[Pull request process from Ken Muse\]](https://www.kenmuse.com/blog/the-many-shas-of-a-github-pull-request)
{: refdef}

Branch PRs have WRITE permissions and repo secret permissions to the target repository.[^5] [^6] Forked PRs only have READ permissions and no repo secret access. 

#### Event: `pull_request_target` (a.k.a. pwn requests)

In the beginning only `pull_request` existed, but `pull_request` are read-only.[^7] But what if you wanted a workflow that adds a label on every new forked PR? And so `pull_request_target` was created with WRITE access and secret access.

But this new workflow event type opens up a vulnerability. A malicious forked PR could give an attacker gain WRITE access to the repo and secrets, via modified build scripts. To prevent this malicious use case, workflows triggered by `pull_request_target` runs in the context of the base branch, which means a default checkout won't include attacker controlled code.  

A dangerous pattern occurs where a checkout explictly references the source repository in `pull_request_target`. This pattern would allow an attacker to gain access to WRITE permissions and secrets. Note this checkout can't just be the default checkout, since the default checkout uses the target repository. A checkout with an explicit reference to the pull request is required for exploitation.

{% raw %}
```yaml
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
```
{% endraw %}

Generally `pull_request` are for running and testing unsafe PR code and `pull_request_target` are for operations like labeling or commenting PRs with care to not checkout the PR code.

# GITHUB_TOKEN custom permissions

Granular GITHUB_TOKEN permissions can be set within a workflow. However this granularity is intended for internal repositories. For PRs from public forked repos, there's a maximum cap on what permissions can be granted regardless of what was set in the custom permission policy. This maximum is cap is `READ` for all scopes, except for `id-token` which is set to `none`.[^8]

Lastly there is a `Send write tokens to workflows from pull requests` setting which allows forks to use a token with write permission, but this setting only applies to forks of private repositories.[^9]

# References

[^1]: There is a third event called `workflow_run` that also can be vulnerable and has WRITE permissions and access to secrets. This event is triggered at the start or end of another workflow. 

[^2]: Note: Branch PRs are also called same repository PRs, in-repository PRs, or local PRs. The name branch PR likely come from this doc: [https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request). Forked PRs are also called external PRs. 

[^3]: Note, the Base branch is also called the target branch. The feature branch is also referred as the head, source, or compare branch. 

[^4]: [https://www.kenmuse.com/blog/the-many-shas-of-a-github-pull-request/](https://www.kenmuse.com/blog/the-many-shas-of-a-github-pull-request/)

[^5]: *"The reasoning behind the latter is that it is safe to share the repository secrets if the user creating the PR has write permission to the target repository already."* [https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/](https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/)

[^6]: The target repository is the repository that the PR is being merged into. This term is similiar to the target branch terminology and is used by [https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/](https://securitylab.github.com/resources/github-actions-preventing-pwn-requests/)

[^7]: Technically, the original `pull_request` had write permissions but for security reasons, they were restricted to read-only

[^8]: [https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token](https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token)

[^9]: [https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#enabling-workflows-for-forks-of-private-repositories](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#enabling-workflows-for-forks-of-private-repositories)
