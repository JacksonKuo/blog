---
layout: post
title: "Github Actions: Exploitation Deep Dive - Part II"
date: 2024-12-10
tags: ["github"]
published: false
---

# Problem Statement

Following a compromised Github Action via shell injection, what exploitation is possible? Saying this more explicitly, can the following occur:

* Can a compromised GHA on a public repo lead to compromise of internal/private repositories?
* What configurations need to be set for escalation?

# Introduction

![Image]({{ site.baseurl }}/assets/images/github-action.png)

Let's first start out with some initial learning points:

* merge commit: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/about-pull-request-merges#merge-your-commits

* action/checkout on the pull_requests

https://frontside.com/blog/2020-05-26-github-actions-pull_request/


> If the workflow is triggered by an event, such as a push or pull_request, then this action checks out the particular commit corresponding to that event. Otherwise, the default branch, such as main or master, is checked out.

https://graphite.dev/guides/github-actions-checkout


What's the difference between `pull_request` and `pull_request_target`?

In the beginning `pull_request` existed with a READ-only `GITHUB_TOKEN`. For forked repos, 

But what if you wanted a workflow that adds a label on every new PR. So `pull_request_target` was created with READ/WRITE. But this new workflow event type opens up a vulnerability. If a public repo workflow was taken over by a malicious forked PR, that PR would have WRITE access on the repo. 


  Both are events that trigger workflows. The main difference is that for forked pull requests `pull_request_target` will have access to secrets and read/write access to the repo. 

PR from branch = full permissions
PR from forked repo = read permission

# Secrets

secrets

# Checkout

`persist-credentials` determines if the Github Token is saved to the local git config.The default setting is true

# Notes

* Trufflehog typically is run with status checks and a Github App

# Trufflehog Permissions

```
on: 
  push: 
    branches: 
      - main 
  pull_request:
```

```
permissions: 
  contents: read 
  id-token: write 
  issues: write 
  pull-requests: write
```

# Repo Access / Repo Visibility

zz

# Token Types

* Default
* PAT
* Github App

### References:
[^1]: []()

[^2]: []()

[^3]: []()

[^4]: []()

[^5]: []()

[^6]: []()

[^3]: [https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token](https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token)

[^4]: [https://trufflesecurity.com/blog/running-trufflehog-in-a-github-action](https://trufflesecurity.com/blog/running-trufflehog-in-a-github-action)

https://github.com/jstawinski/GitHub-Actions-Attack-Diagram

https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch/comment-page-1/

https://johnstawinski.com/2024/01/11/playing-with-fire-how-we-executed-a-critical-supply-chain-attack-on-pytorch/comment-page-1/

https://adnanthekhan.com/2024/05/06/the-monsters-in-your-build-cache-github-actions-cache-poisoning/

https://github.com/jstawinski/GitHub-Actions-Attack-Diagram

https://medium.com/tinder/exploiting-github-actions-on-open-source-projects-5d93936d189f

https://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability

https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/controlling-permissions-for-github_token#overview

https://www.synacktiv.com/en/publications/github-actions-exploitation-introduction